@using QuickTie.Data.Models
@using QuickTie.Portal.Extensions

@inject IProductService _productService
@inject IJSRuntime JSRuntime

<AuthorizeView Roles="ProductEditor" Context="Auth">
    <Authorized>
        <DxLoadingPanel IndicatorAnimationType="WaitIndicatorAnimationType.Pulse"
                        CssClass="w-100"
                        IsContentBlocked="true"
                        IndicatorVisible="indicatorVisible"
                        IndicatorAreaVisible="indicatorAreaVisible"
                        Visible="indicatorVisible"
                        Text="Updating data..."
                        TextAlignment="LoadingPanelTextAlignment.Right">
            <EditForm EditContext="QTCFormContext" Context="QTCForm">
                <DxFormLayout CssClass="w-100 product-detail-edit-form">
                    <DxFormLayoutItem ColSpanMd="6" Caption="Name:">
                        <DxTextBox Text="@item.Name"
                                   BindValueMode="BindValueMode.OnDelayedInput"
                                   TextExpression="@(() => item.Name)"
                                   TextChanged="@(async (string new_value) => {
                                                item.Name = new_value;
                                                await HandleChange();
                                            })"
                                   InputDelay="1000" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem ColSpanMd="12" Caption="Description:" CssClass="mb-5">
                        <DxMemo Text="@item.Description"
                                BindValueMode="BindValueMode.OnDelayedInput"
                                TextExpression="@(() => item.Description)"
                                TextChanged="@(async (string new_value) => {
                                            item.Description = new_value;
                                            await HandleChange();
                                        })"
                                InputDelay="1000" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Manufacturer:" BeginRow="true">
                        <DxComboBox Data="@ManufacturerList"
                                    Value="@item.Manufacturer"
                                    ValueExpression="@(() => item.Manufacturer )"
                                    ValueChanged="@(async (Manufacturer new_value) => {
                                            item.Manufacturer = new_value;
                                            await HandleChange();
                                            })" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="QuickTie Cable Type:" BeginRow="true">
                        <DxComboBox Data="@QTCCableTypeList"
                                    Value="@item.CableType"
                                    ValueExpression="@(() => item.CableType )"
                                    ValueChanged="@(async (QuickTieCableType new_value) => {
                                            item.CableType = new_value;
                                            await HandleChange();
                                            })" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Weight:">
                        <DxSpinEdit Value="@item.Weight"
                                    ValueExpression="@(() => item.Weight)"
                                    ValueChanged="@(async (double newValue) => {
                                        item.Weight = newValue;
                                        await HandleChange();
                                        })"
                                    InputDelay="1000"
                                    BindValueMode="BindValueMode.OnDelayedInput" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="AllowableLoad:">
                        <DxSpinEdit Value="@item.AllowableLoad"
                                    ValueExpression="@(() => item.AllowableLoad)"
                                    ValueChanged="@(async (double newValue) => {
                                            item.AllowableLoad = newValue;
                                            await HandleChange();
                                            })"
                                    InputDelay="1000"
                                    BindValueMode="BindValueMode.OnDelayedInput" />
                    </DxFormLayoutItem>
                    
                </DxFormLayout>
            </EditForm>

        </DxLoadingPanel>
    </Authorized>
    <NotAuthorized>
        <div class="mb-5">
            <div class="d-flex align-items-center">
                <h2 class="fw-bold pe-5">@item.Name</h2>
                <span class="product-badge">@item.ProductType</span>
            </div>
            <h6>@item.Description</h6>
        </div>
        <div class="mb-3">
            <h6 class="fw-bold">Manufacturer</h6>
            <span>@item.Manufacturer</span>
        </div>

        <div class="mb-3">
            <h6 class="fw-bold">Measurements</h6>
            <div class="d-flex flex-wrap">
                <span class="col-6">
                    <span class="text-secondary pe-3">Weight:</span>@item.Weight
                </span>
            </div>
        </div>
       
        <div class="mb-3">
            <h6 class="fw-bold">Type</h6>
            <div class="d-flex flex-wrap">
                <span class="col-12">
                    <span class="text-secondary pe-3">Cable Type:</span>@item.CableType
                </span>
            </div>
        </div>

        @*
        <div class="mb-3">
            <h6 class="fw-bold">Length</h6>
            <div class="d-flex flex-wrap">
                <span class="col-6">
                    <span class="text-secondary pe-3">Feet:</span>@item.LengthFeet
                </span>
                <span class="col-6">
                    <span class="text-secondary pe-3">Inches:</span>@item.LengthInches
                </span>
            </div>
        </div>
        *@

        <div class="mb-3">
            <h6 class="fw-bold">Allowable Load</h6>
            <div class="d-flex flex-wrap">
                <span class="col-6">
                    @item.AllowableLoad
                </span>
            </div>
        </div>

        <div class="mb-3">
            <h6 class="fw-bold">References</h6>
            <div class="d-flex flex-wrap">
                @if (item.ReferenceNumbers.Any())
                {
                    @string.Join(", ", item.ReferenceNumbers.Select(x => x.Name))
                }
                else
                {
                    <span class="text-secondary">Not Available</span>
                }
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    bool indicatorVisible { get; set; } = false;
    bool indicatorAreaVisible { get; set; } = false;
    LoadingPanelTextAlignment textAlignment = LoadingPanelTextAlignment.Right;

    [Parameter]
    public QuickTieCable item { get; set; }

    private EditContext QTCFormContext;

    protected override void OnInitialized()
    {
        QTCFormContext = new EditContext(item);
    }

    IEnumerable<QuickTieCableType> QTCCableTypeList => Enum.GetValues(typeof(QuickTieCableType)).Cast<QuickTieCableType>();
    IEnumerable<Manufacturer> ManufacturerList => Enum.GetValues(typeof(Manufacturer)).Cast<Manufacturer>();

    private async Task HandleChange()
    {
        indicatorVisible = true;
        indicatorAreaVisible = true;
        bool result = await _productService.UpdateProductAsync(item);
        // if(!result)
        //{
        //    await JSRuntime.InvokeVoidAsync("alert", "Error: Updated data not saved. Try again later!");
        // }
        await Task.Delay(2000);
        indicatorVisible = false;
        indicatorAreaVisible = false;
    }
}
